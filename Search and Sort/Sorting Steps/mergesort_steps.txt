Step 1

array to be sorted = [4,2,1,5,3]
length = 5

	if len(arr) or 5 > 1: True
	Then
		mid = length or 5 / 2 = 2
		lefthalf = arr[:mid(2)] #[4,2]
		righthalf = arr[mid(2):] #[1,5,3]

	Step 1.1 -> merge_sort(lefthalf) or merge([4,2])

	array to be sorted = [4,2]
	length = 2

		if len(arr) or 2 > 1: True
		Then
			mid = length or 2/2 = 1
			lefthalf = arr[:mid(1)] #[4]
			righthalf = arr[mid(1)] #[2]
		
			Step 1.1.1 -> merge_sort(lefthalf) or merge([4])
				array to be sorted = [4]
				length = 1
			
				if len(arr) or 1 > 1: False
				Then None #lefthalf = [4]
			
			Step 1.1.2 -> merge_sort(righthalf) or merge([2])
				array to be sorted = [2]
				length = 1
			
				if len(arr) or 1 > 1: False
				Then None #righthalf = 2
		
		Summary so far after Step 1.1.2
		*Since we cannot reduce [4] nor [2] anymore. They are now
		 elligible for the while loop; lefthalf = [4] and righthalf = [2]
		
		Step 1.1.3 (first while loop)
			array to be sorted = [4,2]
			lefthalf = [4]
			righthalf = [2]
			i = 0
			j = 0
			k = 0
		
			while i or 0 < len(lefthalf([4]) or 1 and j or 0 < len(righthalf([2]) or 1: True
			Then
				if lefthalf[i(0)] or 4 < righthalf[j(0)] or 2: False
				Then
					arr[k(0)]=righthalf[j(0)] or 2 #[2,2]
					j = j + 1 or 0 + 1 = 1
				k = k + 1 or 0 + 1 = 1
		Step 1.1.4 (first while loop)
			array to be sorted = [2,2]
			lefthalf = [4]
			righthalf = [2]
			i = 0
			j = 1
			k = 1
			while i or 0 < len(lefthalf([4]) or 1 and j or 1 < len(righthalf([2]) or 1: False
			Then Pass #[2,2]
		
		Step 1.1.5 (second while loop)
			array to be sorted = [2,2]
			lefthalf = [4]
			righthalf = [2]
			i = 0
			j = 1
			k = 1
			while i or 0 < len(lefthalf([4])) or 1: True
			Then
				arr[k(1)] = lefthalf[i(0)] or 4 #[2,4]
				i = i + 1 or 0 + 1 = 1
				l = k + 1 or 1 + 1 = 2 
		Step 1.1.6 (second while loop)
			array to be sorted = [2,4]
			lefthalf = [4]
			righthalf = [2]
			i = 1
			j = 1
			k = 2
			while i or 1 < len(lefthalf([4])) or 1: False
			Then Pass #[2,4]
		Step 1.1.7 (third while loop)
			i = 1
			j = 1
			k = 2
			while j or 1 < len(righthalf([2]) or 1: False
			Then pass #[2,4]
			
	
	Step 1.2 -> merge sort(righthalf) or mergesort([1,5,3])
	
	array to be sorted = [1,5,3]
	length = 3
	
		if len(arr) or 3 > 1: True
		Then
			mid = length or 3/2 = 1
			lefthalf = arr[:mid(1)] # [1]
			righthalf = arr[mid(1):] # [5,3]
			

		Step 1.2.1 -> mergesort(lefthalf) or mergesort([1])
			array to be sorted = [1]
			length = 1
			
			if len(arr) or 1 > 1: False
			Then None #lefthalf would be [1] for 1st merge sort
		
			
		Step 1.2.2 -> mergesort(righthalf) or mergesort([5,3])
		
			array to be sorted = [5,3]
			length = 2
			
			if len(arr) or 2 > 1: True
			Then
				mid = length or 2/2 = 1
				lefthalf = arr[:mid(1)] = [5]
				righthalf = arr[mid(1):] = [3]

			Step 1.2.2.1 -> mergesort(lefthalf) or mergesort([5])
				array to be sorted = [5]
				length = 1
			
				if len(arr) or 1 > 1: False
				Then None # lefthalf would be [5] for 2nd mergesort
			

			Step 1.2.2.2 -> mergesort(righthalf) or mergesort([3])
				array to be sorted = [3]
				length = 1
			
				if len(arr) or 1 > 1: False
				Then None #righthalf would be [3] for 2nd mergesort
		
		Step 1.2.3 (first while loop)
			array to be sorted = [5,3]
			lefthalf = [5]
			righthalf = [3]
			i = 0
			j = 0
			k = 0
			while i or 0 < len(lefthalf([5]) or 1 and j or 0 < len(righthalf[3]) or 1: True
			Then
				if lefthalf[i(0)] or 5 < righthalf[j(0)] or 3: False
				Then
					arr[k(0)] = righthalf[j(0)] or 3 #[3,3]
					j = j + 1 or 0 + 1 = 1
				k = k + 1  or 0 + 1 = 1
		Step 1.2.4 (first while loop)
			array to be sorted = [3,3]
			lefthalf = [5]
			righthalf = [3]
			i = 0
			j = 1
			k = 1
			while i or 0 < len(lefthalf([5]) or 1 and j or 1 < len(righthalf[3]) or 1: False
			Then pass #[3,3]
		
		Step 1.2.5 (second while loop)
			array to be sorted = [3,3]
			lefthalf = [5]
			righthalf = [3]
			i = 0
			j = 1
			k = 1
			while i or 0 < len(lefthalf([5])) or 1: True
			Then
				arr[k(1)] = lefthalf[i(0)] or 5 #[3,5]
				i = i + 1 or 0 + 1 = 1
				k = k + 1 or 1 + 1 = 2
		Step 1.2.6 (second while loop)
			array to be sorted = [5,3]
			lefthalf = [5]
			righthalf = [3]
			i = 1
			j = 1
			k = 2
			while i or 1 < len(lefthalf([5])) or 1: False
			Then pass #[5,3]
		Step 1.2.7 (third while loop)
			array to be sorted = [5,3]
			lefthalf = [5]
			righthalf = [3]
			i = 1
			j = 1
			k = 2
			while j or 1 < len(righthalf([3])) or 1: False
			Then pass #[5,3]

	Summary as of Step 1.2.7:
	Where done with the mergesort of 5 and 3 and output is [3,5]
	Now, [3,5] will be value of right half and [1] would be for lefthalf for
	mergesort of [1,5,3] or mergesort([1,5,3])
	
	Step 1.2.8 (first while loop)
		array to be sorted = [1,5,3]
		lefthalf = [1]
		righthalf [3,5]
		i = 0
		j = 0
		k = 0
		
		while i or 0 < len(lefthalf([1])) or 1 and j or 0 < len(righthalf([3,5])) or 2: True
		Then
			if lefthalf[i(0)] or 1 < righthalf[j(0)] or 3: True
			Then arr[k(0)] = lefthalf[i(0)] or [1] #[1,5,3]
				i = i + 1 or 0 + 1 = 1
			k = k + 1 or 0 + 1 = 1
	Step 1.2.9 (first while loop)
		array to be sorted = [1,5,3]
		lefthalf = [1]
		righthalf [3,5]
		i = 1
		j = 0
		k = 1

		while i or 1 < len(lefthalf([1])) or 1 and j or 0 < len(righthalf([3,5])) or 2: False
		Then pass #[1,5,3]

	Step 1.2.10 (second while loop)
		array to be sorted = [1,5,3]
		lefthalf = [1]
		righthalf [3,5]
		i = 1
		j = 0
		k = 1
		
		while i or 1 < len(lefthalf([1])) or 1: False
		Then pass

	Step 1.2.11 (third while loop)
		array to be sorted = [1,5,3]
		lefthalf = [1]
		righthalf [3,5]
		i = 1
		j = 0
		k = 1
		
		while j or 0 < len(righthalf([3,5]) or 2: True
		Then
			arr[k(1)] = righthalf[j(0)] or 3 #[1,3,3]
			j = j + 1 or 0 + 1 = 1
			k = k + 1 or 1 + 1 = 2
	
	Step 1.2.12 (third while loop)
		array to be sorted = [1,3,3]
		lefthalf = [1]
		righthalf [3,5]
		i = 1
		j = 1
		k = 2
		
		while j  or 1 < len(righthalf([3,5]) or 2: True
		Then
			arr[k(2)] = righthalf[j(1)] or 5 #[1,3,5]
			j = j + 1 or 1 + 1 = 2
			k = k + 1 or 1 + 1 = 3

	Step 1.2.13 (third while loop)
		array to be sorted = [1,3,5]
		lefthalf = [1]
		righthalf [3,5]
		i = 1
		j = 2
		k = 3
		
		while j  or 2 < len(righthalf([3,5]) or 2: False
		Then pass #[1,3,5]

	Summary so far as of 1.2.13
	Now we have [2,4] as value for lefthalf and [1,3,5] as value for righthalf
	of the 1st ORIGINAL MERGESORT of [4,2,1,5,3]

Step 2 -> I'll just make it step 2 to not get confused
	
	Step 2.1 (first while loop)
		array to be sorted = [4,2,1,5,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 0
		j = 0
		k = 0

		while i or 0 < len(lefthalf([2,4]) or 2 and j or 0 < len(righthalf([1,3,5]) or 3: True
		Then
			if lefthalf[i(0)] or 2 < righthalf[j(0)] or 1: False
			Then
				arr[k(0)] = righthalf[j(0)] or 1 #[1,2,1,5,3]
				j = j + 1 or 0 + 1 = 1
			k = k + 1 or 0 + 1 = 1

	Step 2.2 (first while loop)
		array to be sorted = [1,2,1,5,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 0
		j = 1
		k = 1

		while i or 0 < len(lefthalf([2,4]) or 2 and j or 1 < len(righthalf([1,3,5]) or 3: True
		Then
			if lefthalf[i(0)] or 2 < righthalf[j(1)] or 3: True
			Then
				arr[k(1)] = lefthalf[i(0)] or 2 #[1,2,1,5,3]
				i = i + 1 or 0 + 1 or 1
			k = k + 1 or 1 + 1 = 2

	Step 2.3 (first while loop)
		array to be sorted = [1,2,1,5,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 1
		j = 1
		k = 2

		while i or 1 < len(lefthalf([2,4]) or 2 and j or 1 < len(righthalf([1,3,5]) or 3: True
		Then
			if lefthalf[i(1)] or 4 < righthalf[j(1)] or 3: False
			Then
				arr[k(2)] = righthalf[i(1)] or 3 #[1,2,3,5,3]
				j = j + 1 or 1 + 1 or 2
			k = k + 1 or 2 + 1 = 3

	Step 2.4 (first while loop)
		array to be sorted = [1,2,3,5,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 1
		j = 2
		k = 3

		while i or 1 < len(lefthalf([2,4]) or 2 and j or 2 < len(righthalf([1,3,5]) or 3: True
		Then
			if lefthalf[i(1)] or 4 < righthalf[j(2)] or 5: True
			Then
				arr[k(3)] = lefthalf[i(1)] or 4 #[1,2,3,4,3]
				i = i + 1 or 1 + 1 = 2
			k = k + 1 or 2 + 1 = 4

	Step 2.4 (first while loop)
		array to be sorted = [1,2,3,4,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 2
		j = 2
		k = 4

		while i or 2 < len(lefthalf([2,4]) or 2 and j or 2 < len(righthalf([1,3,5]) or 3: False
		Then pass #[1,2,3,4,3]

	Step 2.5 (second while loop)
		array to be sorted = [1,2,3,4,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 2
		j = 2
		k = 4

		while i or 2 < len(lefthalf([2,4]) or 2: False
		Then pass #[1,2,3,4,3]

	Step 2.6 (third while loop)
		array to be sorted = [1,2,3,4,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 2
		j = 2
		k = 4

		while j or 2 < len(righthalf([1,3,5]) or 3: True
		Then
			arr[k(4)] = righthalf[j(2)] or 5 #[1,2,3,4,5]
			j = j + 1 or 2 + 1 = 3
			k = k + 1 or 4 + 1 = 5

	Step 2.7 (third while loop)
		array to be sorted = [1,2,3,4,3]
		lefthalf = [2,4]
		righthalf = [1,3,5]
		i = 2
		j = 3
		k = 5

		while j or 3 < len(righthalf([1,3,5]) or 3: False
		Then pass #[1,2,3,4,5]

AND THEN ITS FINALLY SORTED! [1,2,3,4,5]